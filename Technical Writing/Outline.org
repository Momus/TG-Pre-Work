*  [3/7]Summarize your answer to "How the Web Functions" in a PDF of 1-3(max) pages topics below:
   - [ ] 1. When we hit https://www.techtonicgroup.com/ what happens? Donâ€™t
      focus too much on architecture (Monolithic, SOA, Microservices,
      etc.). Try to focus more on how the web functions.
   - [X] 1. From start to finish, how does that data reach you to be rendered
       in the browser?
     - [X] DNS
     - [X] TCP
     - [X] IP
   - [ ] What code is rendered in the browser
   - [X] What is the server-side code's main function?
   - [ ] How many instances of the client-side assets (HTML, CSS, JS,
        Images, etc.) are created?
   - [X] How many instances of the server side code are avialable at any given time?
   - [ ] What is runtime?
   - [ ] How many instances of the databases connected to the server application are created?

* How a wish becomes a web page.

*** The request
    With all the magic surrounding the World Wide Web, it's easy to
    lose sight of what it is and was designed to be: a document
    retrieval system.  When users wants to access $SITE, they need access
    to a document.  Behind the scenes, the web browser, the Internet,
    and the server should work seamlessly together to retrieve and
    compose that document for viewing without the user having to worry
    about how any of that is done.

    Just as users only need to know to that to get a document they
    have to ask a web browsers, web browsers are part of a network
    stack that doesn't require them to know how to retrieve a document
    located at a URL.  The browser sits on the top layer of the
    Internet protocol suite, the Application Layer, and it only to ask the layer
    below, the Transport Layer to fulfill its request.

    The Transport Layer is the operating system's implementation of the
    TCP protocol.  By sending it a system call, the browser asks it to
    open a session with the node where the document is
    located. Specifically, the browser asks to be connected to the
    machine identified by the address in the URL and the port
    specified by the protocol---port 443 for encrypted connections,
    and port 80 for unencrypted.  After TCP notifies the browser that
    a connection is established, the browser sends the remote computer
    a request using the Hypertext Transfer Protocol, or HTTP/1.1. This
    is just a string of text with one of nine request methods (GET and
    POST being the most common ones,), the resource being requested,
    and the protocol version: `GET /index.html HTTP/1.1`

  
    However, like the Application Layer, the Transport Layer has only
    has its specific task, which is communicating with the Transport
    Layer on the peer machine to establish sessions and package and
    unpackage application data into datagrams.  To
    send the data over the Internet, TCP needs the protocol directly
    beneath it on the network stack, the Internet Layer, which uses the
    Internet Protocol, IP, to allow the datagrams, to which IP adds
    another header to turn them into packets that allows them to be
    routed between networks.


    But to physically move the data, the Internet Layer relies on the
    final layer of the Internet protocol suite, the Link layer. This
    is the layer that packages IP packets into Ethernet frames that
    can be transported over a physical medium, whether copper wires or
    wireless signals.  




